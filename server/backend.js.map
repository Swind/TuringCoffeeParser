{"version":3,"sources":["webpack:///webpack/bootstrap b5165399d74719a24bfe","webpack:///./server.js","webpack:///./src/api_server.js","webpack:///external \"hapi\"","webpack:///./~/libs/utils/logger.js","webpack:///external \"winston\"","webpack:///external \"path\"","webpack:///./src/api/cookbooks.js","webpack:///external \"joi\"","webpack:///./src/api/api.js","webpack:///./src/models/cookbooks.js","webpack:///external \"nedb\"","webpack:///./src/api/printer.js","webpack:///./src/models/printer.js","webpack:///./src/channel.js","webpack:///external \"nanomsg\"","webpack:///./src/api/refill.js","webpack:///./src/models/refill.js","webpack:///./src/api/heater.js","webpack:///./src/models/heater.js","webpack:///./src/api/barista.js","webpack:///./src/models/barista.js","webpack:///./~/libs/processes/index.js","webpack:///./~/libs/processes/circle.js","webpack:///./~/libs/processes/base.js","webpack:///./~/libs/processes/middleware/z-aixs.js","webpack:///./~/libs/processes/middleware/temperature.js","webpack:///./~/libs/processes/fixed-point.js","webpack:///./~/libs/processes/spiral.js","webpack:///./~/libs/processes/spiral-total-water.js","webpack:///./~/libs/processes/wait.js","webpack:///./~/libs/processes/home.js","webpack:///./~/libs/processes/move.js","webpack:///external \"inert\"","webpack:///external \"vision\"","webpack:///external \"hapi-swagger\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;ACzEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA,sCAAqC;AACrC;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA,iCAAgC,WAAW,GAAG,SAAS,MAAM,iBAAiB;AAC9E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA,kBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA,uCAAsC,qBAAqB;AAC3D;AACA,MAAK;AACL;AACA;;AAEA;;;;;;;AC/EA,kC;;;;;;ACAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpGA,qC;;;;;;ACAA,kC;;;;;;ACAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,UAAS;AACT,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA,YAAW;AACX,UAAS;AACT,QAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP,oEAAmE,GAAG;AACtE,QAAO;AACP,uDAAsD,GAAG;AACzD;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,UAAS;AACT,QAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP,gEAA+D,GAAG;AAClE,QAAO;AACP,+DAA8D,GAAG;AACjE;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,UAAS;AACT,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,kEAAiE,GAAG;AACpE,QAAO;AACP;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA,8BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,UAAS;AACT,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,gEAA+D,GAAG;AAClE,QAAO;AACP;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA,UAAS;AACT;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnOA,iC;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACtBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA,oBAAmB;AACnB;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;;AAEA;;;;;;;AChDA,kC;;;;;;ACAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,UAAS;AACT,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChFA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;;;;;;;ACnDA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,KAAK,IAAI,kCAAkC;;AAE9D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAA+B,IAAI;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;AC3FA,qC;;;;;;ACAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChCA;;AAEA;AACA,mCAAkC,KAAK;AACvC,mCAAkC,KAAK;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;AC9BA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,UAAS;AACT,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC1DA;;AAEA;AACA,mCAAkC,KAAK;AACvC,mCAAkC,KAAK;;AAEvC;AACA,0CAAyC,YAAY;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC5EA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,UAAS;AACT,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;;;;;;;ACnDA;AACA;;AAEA;;AAEA;AACA,4BAA2B;AAC3B;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,wBAAuB,2BAA2B;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AChxHA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAgB,mBAAmB;AACnC;AACA;;AAEA;AACA;;AAEA;;;;;;;ACrBA;;AAEA;AACA;AACA;;AAEA,iBAAgB,mBAAmB;AACnC;AACA;;AAEA;AACA;;AAEA;;;;;;;ACbA;AACA;;AAEA;;AAEA;;AAEA;AACA,4BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,oBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACxEA;AACA;;AAEA;;AAEA;AACA,4BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC1EA;;AAEA;;AAEA;AACA,4BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC1FA;AACA;;;AAGA;;AAEA;AACA,4BAA2B;AAC3B;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACrCA;AACA;;;AAGA;;AAEA;AACA,4BAA2B;AAC3B;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpCA;AACA;;AAEA;;AAEA;;AAEA;AACA,4BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,QAAO;AACP,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACnDA,mC;;;;;;ACAA,oC;;;;;;ACAA,0C","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b5165399d74719a24bfe\n **/","const ApiServer = require('./src/api_server');\n\nconst CookbooksAPI = require('./src/api/cookbooks');\nconst CookbooksMgr = require('./src/models/cookbooks');\n\nconst PrinterAPI = require('./src/api/printer');\nconst Printer = require('./src/models/printer');\n\nconst RefillAPI = require('./src/api/refill');\nconst Refill = require('./src/models/refill');\n\nconst HeaterAPI = require('./src/api/heater');\nconst Heater = require('./src/models/heater');\n\nconst BaristaAPI = require('./src/api/barista');\nconst Barista = require('./src/models/barista');\n\n/* ##############################################################\n#\n#    Global variables\n#\n###############################################################*/\n\nconst ADDR = '0.0.0.0';\nconst PORT = 3000;\n\n/* ##############################################################\n#\n#    API Server\n#\n###############################################################*/\n\nconst apiServer = new ApiServer(ADDR, PORT);\n\n// Register Plugins\napiServer.register('inert', require('inert'));\napiServer.register('vision', require('vision'));\napiServer.register('hapi-swagger', require('hapi-swagger'));\n\n/* ###############################################################\n#\n#    Route\n#\n###############################################################*/\n\n// Cookbooks\nconst cookbookMgr = new CookbooksMgr(\"cookbooks.db\");\nconst cookbookAPI = new CookbooksAPI(cookbookMgr);\n\n// Printer\nconst printer = new Printer();\nconst printerAPI = new PrinterAPI(printer);\n\n// Heater\nconst heater = new Heater();\nconst heaterAPI = new HeaterAPI(heater);\n\n// Refill\nconst refill = new Refill();\nconst refillAPI = new RefillAPI(refill);\n\n// Barista\nconst barista = new Barista(printer, cookbookMgr);\nconst baristaAPI = new BaristaAPI(barista);\n\napiServer.route(cookbookAPI.apiSpecs());\napiServer.route(printerAPI.apiSpecs());\napiServer.route(heaterAPI.apiSpecs());\napiServer.route(refillAPI.apiSpecs());\napiServer.route(baristaAPI.apiSpecs());\n\napiServer.enable_static_file_server(\"./public\")\n\napiServer.start();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./server.js\n ** module id = 0\n ** module chunks = 0\n **/","const Hapi = require('hapi');\nconst logger = require('libs/utils/logger');\n\nclass APIServer {\n  constructor(address = '127.0.0.0', port = 3000) {\n    this.address = address;\n    this.port = port;\n\n    // HTTP Server\n    this.server = new Hapi.Server();\n\n    this.server.connection({\n      address: this.address,\n      port: this.port,\n    });\n  }\n\n  register(name, plugin, options = {}) {\n    this.server.register({\n      register: plugin,\n      options,\n    }, (err) => {\n      if (err) {\n        logger.error('Failed to load plugin:', err);\n      } else {\n        logger.info('Successed to load plugin:', name);\n      }\n    });\n  }\n\n  route(apis) {\n    for (const api of apis) {\n      logger.info(`Registered ${api.method}:${api.path} - \"${api.config.notes}\" successfully`);\n      this.server.route(api);\n    }\n  }\n\n  addRoute({\n    method,\n    path,\n    handler,\n    config,\n  }) {\n    this.server.route({\n      method,\n      path,\n      handler,\n      config,\n    });\n  }\n\n  enable_static_file_server(folder_path){\n    this.server.route({\n        method: 'GET',\n        path: '/{param*}',\n        handler: {\n            directory: {\n                path: folder_path,\n                redirectToSlash: true,\n                index: true\n            }\n        }\n    });\n  }\n\n  start() {\n    logger.info('Start the API server ...');\n\n    this.server.start((err) => {\n      if (err) {\n        throw err;\n      } else {\n        logger.info('Server running at:', this.server.info.uri);\n        logger.info('Swagger at:', `${this.server.info.uri}/documentation`);\n      }\n    });\n  }\n}\n\nmodule.exports = APIServer;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api_server.js\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = require(\"hapi\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"hapi\"\n ** module id = 2\n ** module chunks = 0\n **/","// NOTE: this adds a filename and line number to winston's output\n// Example output: 'info (routes/index.js:34) GET 200 /index'\n\nvar winston = require('winston')\nvar path = require('path')\nvar PROJECT_ROOT = path.join(__dirname, '..')\n\ntimestamp = () => {\n  return new Date().toLocaleString();\n}\n\nvar logger = new winston.Logger({\n      transports: [\n        new (winston.transports.Console) ({\n          colorize: true,\n          prettyPrint: true,\n          depth: true,\n          humanReadableUnhandledException: true,\n          timestamp: timestamp\n        })\n      ]\n    })\n\n// this allows winston to handle output from express' morgan middleware\nlogger.stream = {\n  write: function (message) {\n    logger.info(message)\n  }\n}\n\n// A custom logger interface that wraps winston, making it easy to instrument\n// code and still possible to replace winston in the future.\n\nmodule.exports.debug = module.exports.log = function () {\n  logger.debug.apply(logger, formatLogArguments(arguments))\n}\n\nmodule.exports.info = function () {\n  logger.info.apply(logger, formatLogArguments(arguments))\n}\n\nmodule.exports.warn = function () {\n  logger.warn.apply(logger, formatLogArguments(arguments))\n}\n\nmodule.exports.error = function () {\n  logger.error.apply(logger, formatLogArguments(arguments))\n}\n\nmodule.exports.stream = logger.stream\n\n/**\n * Attempts to add file and line number info to the given log arguments.\n */\nfunction formatLogArguments (args) {\n  args = Array.prototype.slice.call(args)\n\n  var stackInfo = getStackInfo(1)\n\n  if (stackInfo) {\n    // get file path relative to project root\n    var calleeStr = '(' + stackInfo.relativePath + ':' + stackInfo.line + ')'\n\n    if (typeof (args[0]) === 'string') {\n      args[0] = calleeStr + ' ' + args[0]\n    } else {\n      args.unshift(calleeStr)\n    }\n  }\n\n  return args\n}\n\n/**\n * Parses and returns info about the call stack at the given index.\n */\nfunction getStackInfo (stackIndex) {\n  // get call stack, and analyze it\n  // get all file, method, and line numbers\n  var stacklist = (new Error()).stack.split('\\n').slice(3)\n\n  // stack trace format:\n  // http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n  // do not remove the regex expresses to outside of this method (due to a BUG in node.js)\n  var stackReg = /at\\s+(.*)\\s+\\((.*):(\\d*):(\\d*)\\)/gi\n  var stackReg2 = /at\\s+()(.*):(\\d*):(\\d*)/gi\n\n  var s = stacklist[stackIndex] || stacklist[0]\n  var sp = stackReg.exec(s) || stackReg2.exec(s)\n\n  if (sp && sp.length === 5) {\n    return {\n      method: sp[1],\n      relativePath: path.relative(PROJECT_ROOT, sp[2]),\n      line: sp[3],\n      pos: sp[4],\n      file: path.basename(sp[2]),\n      stack: stacklist.join('\\n')\n    }\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/libs/utils/logger.js\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = require(\"winston\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"winston\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = require(\"path\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"path\"\n ** module id = 5\n ** module chunks = 0\n **/","const Joi = require('joi');\nconst API = require('./api');\n\nclass CookbooksAPI extends API {\n  constructor(manager) {\n    super();\n    this.manager = manager;\n  }\n\n  /*\n   * List all cookbooks\n   */\n  listSpec() {\n    return {\n      method: 'GET',\n      path: '/api/cookbooks',\n      config: {\n        tags: ['api'],\n        description: 'List all cookbooks',\n        notes: 'List all cookbooks',\n      },\n      handler: this.list.bind(this),\n    };\n  }\n\n  list(request, reply) {\n    this.manager.list((err, cookbooks) => {\n      if (err) {\n        this.failed(reply, 503, err);\n      } else {\n        this.successed(reply, 200, 'List all cookbooks successfully', cookbooks);\n      }\n    });\n  }\n\n  /*\n   * Create a cookbook\n   */\n  createSpec() {\n    return {\n      method: 'POST',\n      path: '/api/cookbooks',\n      config: {\n        tags: ['api'],\n        description: 'Create a new cookbook',\n        notes: 'Create a new cookbook',\n        validate: {\n          payload: {\n            name: Joi.string().required(),\n            description: Joi.string(),\n            processes: Joi.array(),\n          },\n        },\n      },\n      handler: this.create.bind(this),\n    };\n  }\n\n  create(request, reply) {\n    this.manager.create(request.payload, (err, doc) => {\n      if (err) {\n        this.failed(reply, 503, err);\n      } else {\n        this.successed(reply, 201, 'Create the cookbook successfully', doc);\n      }\n    });\n  }\n\n  /*\n   * Update a cookbook\n   */\n  updateSpec() {\n    return {\n      method: 'PUT',\n      path: '/api/cookbooks/{id}',\n      config: {\n        tags: ['api'],\n        description: 'Update the cookbook',\n        notes: 'Update the cookbook',\n        validate: {\n          params: {\n            id: Joi.string().required(),\n          },\n          payload: {\n            name: Joi.string().required(),\n            description: Joi.string(),\n            processes: Joi.array(),\n          },\n        },\n      },\n      handler: this.update.bind(this),\n    };\n  }\n\n  update(request, reply) {\n    const id = request.params.id;\n\n    this.manager.update(id, request.payload, (err, numReplaced) => {\n      if (err) {\n        this.failed(reply, 503, err);\n      } else if (numReplaced === 0) {\n        this.failed(reply, 404, `Can't find the cookbook with id ${id}`);\n      } else {\n        this.successed(reply, 200, `Update cookbook ${id} successfully`);\n      }\n    });\n  }\n\n  /*\n   * Read a cookbook\n   */\n  readSpec() {\n    return {\n      method: 'GET',\n      path: '/api/cookbooks/{id}',\n      config: {\n        tags: ['api'],\n        description: 'Read the cookbook',\n        notes: 'Read the cookbook',\n        validate: {\n          params: {\n            id: Joi.string().required(),\n          },\n        },\n      },\n      handler: this.read.bind(this),\n    };\n  }\n\n  read(request, reply) {\n    const id = request.params.id;\n\n    this.manager.read(request.params.id, (err, cookbook) => {\n      if (err) {\n        this.failed(reply, 503, err);\n      } else if (!cookbook) {\n        this.failed(reply, 404, `Can't find cookbook with id ${id}`);\n      } else {\n        this.successed(reply, 200, `Read the cookbook by id ${id} successfully`, cookbook);\n      }\n    });\n  }\n\n  /*\n   * Delete a cookbook\n   */\n  deleteSpec() {\n    return {\n      method: 'DELETE',\n      path: '/api/cookbooks/{id}',\n      config: {\n        tags: ['api'],\n        description: 'Delete the cookbook',\n        notes: 'Delete the cookbook',\n        validate: {\n          params: {\n            id: Joi.string().required(),\n          },\n        },\n      },\n      handler: this.delete.bind(this),\n    };\n  }\n\n  delete(request, reply) {\n    const id = request.params.id;\n    this.manager.delete(id, (err, numRemoved) => {\n      if (err) {\n        this.failed(reply, 503, err);\n      } else if (numRemoved === 0) {\n        this.failed(reply, 404, `Can't delete cookbook with id ${id}`);\n      } else {\n        this.successed(reply, 204, 'Delete cookbook successfully');\n      }\n    });\n  }\n\n  copySpec() {\n    return {\n      method: 'POST',\n      path: '/api/cookbooks/{id}/copy',\n      config: {\n        tags: ['api'],\n        description: 'Copy the cookbook',\n        notes: 'Copy the cookbook',\n        validate: {\n          params: {\n            id: Joi.string().required(),\n          },\n        },\n      },\n      handler: this.copy.bind(this),\n    };\n  }\n\n  copy(request, reply) {\n    const id = request.params.id;\n    this.manager.read(request.params.id, (err, cookbook) => {\n      if (err) {\n        this.failed(reply, 503, err);\n      } else if (!cookbook) {\n        this.failed(reply, 404, `Can't find cookbook with id ${id}`);\n      } else {\n        delete cookbook['_id'];\n        this.manager.create(cookbook, (err, doc) => {\n          if (err) {\n            this.failed(reply, 503, err);\n          } else {\n            this.successed(reply, 201, 'Copy the cookbook successfully', doc);\n          }\n        });\n      }\n    });\n  }\n\n  apiSpecs() {\n    return [\n      this.listSpec(),\n      this.createSpec(),\n      this.readSpec(),\n      this.updateSpec(),\n      this.deleteSpec(),\n      this.copySpec()\n    ];\n  }\n}\n\nmodule.exports = CookbooksAPI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/cookbooks.js\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = require(\"joi\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"joi\"\n ** module id = 7\n ** module chunks = 0\n **/","class API {\n  failed(reply, statusCode, message) {\n    reply({\n      statusCode,\n      message,\n    });\n  }\n\n  successed(reply, statusCode, message, data) {\n    const content = {\n      statusCode,\n      message,\n    };\n\n    if (data) {\n      content.data = data;\n    }\n\n    reply(content);\n  }\n}\n\nmodule.exports = API;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/api.js\n ** module id = 8\n ** module chunks = 0\n **/","const Nedb = require('nedb');\n\nclass CookbookMgr {\n  constructor(dbname, inMemoryOnly = false) {\n    this.db = new Nedb({\n      filename: dbname,\n      autoload: true,\n      inMemoryOnly,\n    });\n  }\n\n  list(callback) {\n    this.db.find({}, (err, docs) => {\n      callback(err, docs);\n    });\n  }\n\n  create(data, callback) {\n    this.db.insert(data, (err, doc) => {\n      callback(err, doc);\n    });\n  }\n\n  update(id, data, callback) {\n    this.db.update({\n      _id: id,\n    }, data, (err, numReplaced) => {\n      callback(err, numReplaced);\n    });\n  }\n\n  read(id, callback) {\n    this.db.findOne({\n      _id: id,\n    }, (err, doc) => {\n      callback(err, doc);\n    });\n  }\n\n  delete(id, callback) {\n    this.db.remove({\n      _id: id,\n    }, (err, numRemoved) => {\n      callback(err, numRemoved);\n    });\n  }\n}\n\nmodule.exports = CookbookMgr;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/models/cookbooks.js\n ** module id = 9\n ** module chunks = 0\n **/","module.exports = require(\"nedb\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"nedb\"\n ** module id = 10\n ** module chunks = 0\n **/","const Joi = require('joi');\nconst API = require('./api');\n\nclass PrinterAPI extends API {\n  constructor(printer) {\n    super();\n    this.printer = printer;\n  }\n\n  statusSpec() {\n    return {\n      method: 'GET',\n      path: '/api/printer',\n      config: {\n        tags: ['api'],\n        description: 'Get the status of the printer',\n        notes: 'Get the status of the printer',\n      },\n      handler: this.status.bind(this),\n    };\n  }\n\n  status(request, reply) {\n    this.successed(reply, 200, 'Get the printer status successfully', this.printer.status);\n  }\n\n  homeSpec() {\n    return {\n      method: 'POST',\n      path: '/api/printer/home',\n      config: {\n        tags: ['api'],\n        description: 'Move the head to the home position',\n        notes: 'Move the head to the home position',\n      },\n      handler: this.home.bind(this),\n    };\n  }\n\n  home(request, reply) {\n    this.printer.home();\n    this.successed(reply, 200, 'Move the head to the home position successfully');\n  }\n\n  jogSpec() {\n    return {\n      method: 'POST',\n      path: '/api/printer/jog',\n      config: {\n        tags: ['api'],\n        description: 'Control the printer to move the head or extrude the water',\n        notes: 'Control the printer to move the head or extrude the water',\n        validate: {\n          payload: {\n            x: Joi.number().integer(),\n            y: Joi.number().integer(),\n            z: Joi.number().integer(),\n            f: Joi.number().integer(),\n          },\n        },\n      },\n      handler: this.jog.bind(this),\n    };\n  }\n\n  jog(request, reply) {\n    const payload = request.payload\n    this.printer.jog(payload.x, payload.y, payload.z, payload.f);\n    this.successed(reply, 200, 'Send the jog command to the printer successfully');\n  }\n\n  apiSpecs() {\n    return [\n      this.statusSpec(),\n      this.homeSpec(),\n      this.jogSpec(),\n    ];\n  }\n}\n\nmodule.exports = PrinterAPI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/printer.js\n ** module id = 11\n ** module chunks = 0\n **/","const Channel = require('../channel');\n\nconst PRINTER_PUB_ADDRESS = 'ipc:///tmp/printer_pub_channel';\nconst PRINTER_CMD_ADDRESS = 'ipc:///tmp/printer_cmd_channel';\n\nconst PRINTER = 'printer';\n\nclass Printer {\n  constructor() {\n    // The monitor will call the callback function when receive the message from subscribed channel.\n    this.monitor = new Channel.Monitor;\n    this.monitor.subscribe(PRINTER_PUB_ADDRESS, PRINTER, this.updateStatusByMonitor.bind(this));\n    this.cmd = new Channel.CmdChannel(PRINTER_CMD_ADDRESS);\n\n    // Save the latest printer status (Should we save the history of status ?)\n    this.status = {};\n    this.last_status_update_time = 0;\n\n    this.total_sent_cmd = 0;\n  }\n\n  updateStatusByMonitor(data) {\n    const updateIfExisting = (name) => {\n      if (name in data) {\n        this.status[name] = data[name];\n      }\n    };\n\n    // The printer server will publish three types status.\n    // So we need to check the content is existing or not.\n    updateIfExisting('state');\n    updateIfExisting('state_string');\n    updateIfExisting('progress');\n\n    const date = new Date();\n    this.last_update_time = date.getTime();\n  }\n\n  send_points(points) {\n    this.cmd.send({\n      \"points\": points,\n    });\n  }\n\n  send_cancle() {\n    this.cmd.send({\n      \"cancle\": True,\n    });\n  }\n}\n\nmodule.exports = Printer;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/models/printer.js\n ** module id = 12\n ** module chunks = 0\n **/","const Nanomsg = require('nanomsg');\nconst logger = require('libs/utils/logger');\n\nclass Monitor {\n  constructor() {\n    this.subscribers = {};\n  }\n\n  updateData(name, msg) {\n    const sub = this.subscribers[name];\n    sub.data = JSON.parse(msg);\n    logger.info(`${name}: ${JSON.stringify(sub.data, null, 2)}`)\n\n    const d = new Date();\n    sub.last_updated_time = d.getTime();\n\n    if (sub.action != null) {\n      sub.action(msg);\n    }\n  }\n\n  subscribe(address, name, action = null) {\n    const sock = Nanomsg.socket('sub');\n    sock.connect(address);\n    sock.on('data', this.updateData.bind(this, name));\n\n    const sub = {};\n    sub.socket = sock;\n    sub.name = name;\n    sub.action = action;\n    sub.data = {};\n    sub.last_updated_time = 0;\n\n    this.subscribers[name] = sub;\n  }\n\n  getData(name) {\n    let data = {};\n    if (name in this.subscribers) {\n      data = this.subscribers[name].data;\n    }\n\n    return data;\n  }\n\n  getLastUpdatedTime(name) {\n    const sub = this.subscribers[name];\n    return sub.last_updated_time;\n  }\n\n  close(name) {\n    this.subscribers[name].socket.close();\n    delete this.subscribers[name];\n  }\n\n  closeAll() {\n    for (const [key, value] of this.subscribers) {\n      logger.info(`Close the ${key} channel`);\n      value.socket.close();\n    }\n    this.subscribers = {};\n  }\n}\n\nclass CmdChannel {\n  constructor(address, callback = null) {\n    this.sock = Nanomsg.socket('pair');\n    this.sock.connect(address);\n    this.sock.on('data', this.replyHandler.bind(this));\n\n    this.callback = callback;\n  }\n\n  replyHandler(msg) {\n    if (this.callback) {\n      this.callback(JSON.parse(msg));\n    }\n  }\n\n  send(jsonObj) {\n    this.sock.send(JSON.stringify(jsonObj));\n  }\n\n  close() {\n    this.sock.close();\n  }\n}\n\nmodule.exports = {\n  Monitor,\n  CmdChannel,\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/channel.js\n ** module id = 13\n ** module chunks = 0\n **/","module.exports = require(\"nanomsg\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"nanomsg\"\n ** module id = 14\n ** module chunks = 0\n **/","const API = require('./api');\n\nclass RefillAPI extends API {\n  constructor(refill) {\n    super();\n    this.refill = refill;\n  }\n\n  statusSpec() {\n    return {\n      method: 'GET',\n      path: '/api/refill',\n      config: {\n        tags: ['api'],\n        description: 'Get the refill status',\n        notes: 'Get the refill status',\n      },\n      handler: this.status.bind(this),\n    };\n  }\n\n  status(request, reply) {\n    this.successed(reply, 200, 'Get the refill status', this.refill.status);\n  }\n\n  apiSpecs() {\n    return [\n      this.statusSpec(),\n    ];\n  }\n}\n\nmodule.exports = RefillAPI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/refill.js\n ** module id = 15\n ** module chunks = 0\n **/","const Channel = require('../channel');\n\nconst NAME = 'refill';\nconst PUB_ADDRESS = `ipc:///tmp/${NAME}_pub_channel`;\nconst CMD_ADDRESS = `ipc:///tmp/${NAME}_cmd_channel`;\n\nclass Refill {\n  constructor() {\n    this.monitor = new Channel.Monitor;\n    /* The message example from the heater server\n      {\n        full: True\n      }\n    */\n    this.monitor.subscribe(PUB_ADDRESS, NAME, this.update_status);\n  }\n\n  isFull() {\n    return this.monitor.getData(NAME).full;\n  }\n\n  get status() {\n    return this.monitor.getData(NAME);\n  }\n\n  get lastUpdatedTime() {\n    return this.monitor.getLastUpdatedTime(NAME);\n  }\n}\n\nmodule.exports = Refill;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/models/refill.js\n ** module id = 16\n ** module chunks = 0\n **/","const Joi = require('joi');\nconst API = require('./api');\n\nclass HeaterAPI extends API {\n  constructor(heater) {\n    super();\n    this.heater = heater;\n  }\n\n  statusSpec() {\n    return {\n      method: 'GET',\n      path: '/api/heater',\n      config: {\n        tags: ['api'],\n        description: 'Get the heater status',\n        notes: 'Get the heater status',\n      },\n      handler: this.status.bind(this),\n    };\n  }\n\n  status(request, reply) {\n    this.successed(reply, 200, 'Get the heater status', this.heater.status);\n  }\n\n  setTemperatureSpec() {\n    return {\n      method: 'POST',\n      path: '/api/heater',\n      config: {\n        tags: ['api'],\n        description: 'Set the heater temperature',\n        notes: 'Set the heater temperature',\n        validate: {\n          payload: {\n            temperature: Joi.number().integer().required(),\n          },\n        },\n      },\n      handler: this.setTemperature.bind(this),\n    };\n  }\n\n  setTemperature(request, reply) {\n    const temperature = request.payload.temperature;\n    this.heater.setTemperature(temperature);\n    this.successed(reply, 200, 'Set the temperature successfully');\n  }\n\n  apiSpecs() {\n    return [\n      this.statusSpec(),\n      this.setTemperatureSpec(),\n    ];\n  }\n}\n\nmodule.exports = HeaterAPI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/heater.js\n ** module id = 17\n ** module chunks = 0\n **/","const Channel = require('../channel');\n\nconst NAME = 'printer';\nconst PUB_ADDRESS = `ipc:///tmp/${NAME}_pub_channel`;\nconst CMD_ADDRESS = `ipc:///tmp/${NAME}_cmd_channel`;\n\nconst OUTPUT_NAME = 'output'\nconst OUTPUT_PUB_ADDRESS = `ipc:///tmp/${OUTPUT_NAME}_pub_channel`\n\nclass Heater {\n  // The default value if for the PID\n  constructor(k = 70, i = 165, d = 16, cycleTime = 1) {\n    this.monitor = new Channel.Monitor;\n    /* The message example from the heater server\n      {\n        cycle_time: 5,\n        duty_cycle: 70,\n        set_point: 80,\n        temperature: 26.53,\n      }\n    */\n    this.k = k;\n    this.i = i;\n    this.d = d;\n    this.cycleTime = cycleTime;\n\n    this.monitor.subscribe(PUB_ADDRESS, NAME, null);\n    this.cmd = new Channel.CmdChannel(CMD_ADDRESS);\n\n    /* The message example from the output server\n     * {\n     *  temperature: 60\n     * }\n     */\n    this.monitor.subscribe(OUTPUT_PUB_ADDRESS, OUTPUT_NAME, null)\n  }\n\n  get status() {\n    /* The status example\n      {\n        cycle_time: 5,\n        duty_cycle: 70,\n        set_point: 80,\n        temperature: 26.53,\n        output_temperature: 60 \n      }\n    */\n    let heater_status = this.monitor.getData(NAME);\n    let output_status = this.monitor.getData(OUTPUT_NAME);\n\n    return {\n      cycle_time: heater_status.cycle_time,\n      duty_cycle: heater_status.duty_cycle,\n      set_point: heater_status.set_point,\n      temperature: heater_status.temperature,\n      output_temperature: output_status.temperature\n    }\n  }\n\n  get lastUpdatedTime() {\n    return this.monitor.getLastUpdatedTime(NAME);\n  }\n\n  setTemperature(temperature) {\n    const payload = {\n      cycle_time: this.cycleTime,\n      k: this.k,\n      i: this.i,\n      d: this.d,\n      set_point: temperature,\n    };\n\n    this.cmd.send(payload);\n  }\n}\n\nmodule.exports = Heater;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/models/heater.js\n ** module id = 18\n ** module chunks = 0\n **/","const Joi = require('joi');\nconst API = require('./api');\n\nclass BaristaAPI extends API {\n  constructor(barista) {\n    super();\n    this.barista = barista;\n  }\n\n  brewSpec() {\n    return {\n      method: 'POST',\n      path: '/api/barista/brew',\n      config: {\n        tags: ['api'],\n        description: 'Add cookbook into queue',\n        notes: 'Add cookbook into queue',\n        validate: {\n          payload: {\n            id: Joi.string().required(),\n          }\n        }\n      },\n      handler: this.brew.bind(this),\n    };\n  }\n\n  brew(request, reply) {\n    const payload = request.payload;\n    console.log(payload);\n    if (this.barista.brew(payload.id) !== 0) {\n    }\n    this.successed(reply, 200, 'Brew successful');\n  }\n\n  jogSpec() {\n    return {\n      method: 'POST',\n      path: '/api/barista/jog',\n      config: {\n        tags: ['api'],\n        description: 'Control the printer to move the head or extrude the water',\n        notes: 'Control the printer to move the head or extrude the water',\n        validate: {\n          payload: {\n            x: Joi.number().integer(),\n            y: Joi.number().integer(),\n            z: Joi.number().integer(),\n            f: Joi.number().integer(),\n            e: Joi.number().integer(),\n            t: Joi.number().integer(),\n          },\n        },\n      },\n      handler: this.jog.bind(this),\n    };\n  }\n\n  jog(request, reply) {\n    const payload = request.payload\n    this.barista.jog(payload.x, payload.y, payload.z, payload.e, payload.f, t=payload.t);\n    this.successed(reply, 200, 'Send the jog command to the printer successfully');\n  }\n\n\n  apiSpecs() {\n    return [\n      this.brewSpec(),\n      this.jogSpec()\n    ];\n  }\n}\n\nmodule.exports = BaristaAPI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/barista.js\n ** module id = 19\n ** module chunks = 0\n **/","const Refill = require('./refill');\nconst Printer = require('./printer');\nconst Processes = require('libs/processes')\nconst Home = require('libs/processes/home')\nconst Wait = require('libs/processes/wait')\nconst Point = require('libs/processes/base').Point\n\nclass Barista {\n  constructor(printer, cookbookMgr) {\n    this.printer = printer;\n    this.cookbookMgr = cookbookMgr;\n  }\n\n  brew(id) {\n    this.cookbookMgr.read(id, (err, cookbook) => {\n      if (err) {\n        return err;\n      }\n\n      let all_points = Processes.load(cookbook.processes)\n      this.printer.send_points(all_points);\n\n      return 0;\n    });\n  }\n\n  home(){\n    let home_obj = Process.createProcess(Home.default());\n    this.printer.send_points([home_obj]);\n\n    return 0;\n  }\n\n  jog(x, y, z, e, f, t){\n    let point = new Point(x, y, f);\n    point.z = z;\n    point.e = e;\n    point.t = t;\n\n    this.printer.send_points([point]);\n\n    return 0;\n  }\n}\n\nmodule.exports = Barista;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/models/barista.js\n ** module id = 20\n ** module chunks = 0\n **/","const Circle = require('./circle');\nconst FixedPoint = require('./fixed-point');\nconst Spiral = require('./spiral');\nconst SpiralTotalWater = require('./spiral-total-water');\nconst Wait = require('./wait');\nconst Home = require('./home');\nconst Move = require('./move');\n\nvar _processes = {\n  \"circle\": Circle,\n  \"fixed_point\": FixedPoint,\n  \"spiral\": Spiral,\n  \"spiral total water\": SpiralTotalWater,\n  \"wait\": Wait,\n  \"home\": Home,\n  \"move\": Move,\n}\n\nvar _processes_pipeline = [\n]\n\n\nfunction createProcess(params){\n    return new _processes[params.name](params);\n}\n\nfunction load(processes_json){\n\n  // Create process class from process json config\n  let process_list = []\n  let all_points = []\n\n  processes_json.forEach(function (process){\n    process_obj = createProcess(process);\n    process_list = process_list.concat(process_obj.points);\n  });\n\n  // Let pipeline to handle all processes\n  _processes_pipeline.forEach(function(pipeline){\n    process_list = pipeline(process_list);\n  });\n\n  process_list.forEach(function (process){\n    all_points = all_points.concat(process.points);\n  });\n\n  return all_points\n}\n\nmodule.exports = {\n  load\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/libs/processes/index.js\n ** module id = 21\n ** module chunks = 0\n **/","const Base = require('./base');\nconst Point = Base.Point;\n\nclass Circle extends Base.Process {\n\n  static get default() {\n    return Object.assign({}, {\n      type: 'process',\n      name: 'circle',\n      radius: {\n        start: 20, // mm\n      },\n      high: {\n        start: 300, // mm\n        end: 300,\n      },\n      cylinder: 5,\n      total_water: 0, // mm\n      point_interval: 2.0, // mm\n      feedrate: 80, // mm\n      extrudate: 0.2, // ml/mm\n      temperature: 60 // C\n    })\n  }\n\n  constructor(params = Circle.default) {\n    super(params);\n\n    this.point_number = this.length / this.params.point_interval;\n  }\n\n  get time() {\n    return this.length / this.params.feedrate * 60;\n  }\n\n  get water() {\n    return this.params.total_water;\n  }\n\n  get length() {\n    return this.params.total_water / this.params.extrudate;\n  }\n\n  get _points() {\n    const circumference = 2 * Math.pi * this.params.radius.start;\n    const cylinder = this.length / circumference;\n    const av = (2 * Math.Pi * cylinder) / this.point_number;\n\n    const points = [];\n\n    for (let index = 0; index < this.point_number; index++) {\n      const x = this.params.radius * Math.cos(av * index);\n      const y = this.params.radius * Math.sin(av * index);\n      const f = this.params.feedrate;\n\n      const point = new Point(x, y, f);\n      point.e = this.water / this.length;\n      points.push(point);\n    }\n\n    return points;\n  }\n}\n\nmodule.exports = Circle;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/libs/processes/circle.js\n ** module id = 22\n ** module chunks = 0\n **/","// MiddleWares\nconst zAixs = require('./middleware/z-aixs');\nconst Temperature = require('./middleware/temperature');\n\nclass Point {\n  constructor(x = null, y = null, f = null) {\n    /*\n     * x : x aixs\n     * y : y aixs\n     * z : z aixs\n     * f : feed rate\n     * t : temperature\n     */\n\n    this.type = 'point'\n    this.x = x;\n    this.y = y;\n    this.f = f;\n    this.e = 0;\n    this.z = null;\n    this.t = null;\n  }\n\n  get json() {\n    return JSON.stringify(this);\n  }\n}\n\nclass Command {\n  constructor(command) {\n    this.type = 'command'\n    this.name = command\n  }\n\n  get json() {\n    return JSON.stringify(this);\n  }\n}\n\nclass MixCommand extends Command {\n  constructor(temperature) {\n    super('mix')\n    this.t = temperature\n  }\n}\n\nclass CalibrationCommand extends Command {\n  constructor(temperature) {\n    super('calibration')\n    this.t = temperature\n  }\n}\n\nclass HomeCommand extends Command {\n  constructor() {\n    super('home')\n  }\n}\n\nclass WaitCommand extends Command {\n  constructor(second) {\n    super('wait')\n    this.time = second\n  }\n}\n\nclass Process {\n  constructor(params) {\n    this.middleWares = [zAixs, Temperature];\n    this.params = params;\n  }\n\n  registerMiddleWare(middleWare) {\n    this.middleWares.push(middleWare);\n  }\n\n  get time() {\n    return undefined;\n  }\n\n  get water() {\n    return undefined;\n  }\n\n  get length() {\n    return undefined;\n  }\n\n  get _points(){\n    return []\n  }\n\n  get points(){\n    let points = this._points;\n\n    for (const middleWare of this.middleWares) {\n      points = middleWare(points, this.params);\n    }\n\n    points = this.post_action(points);\n\n    return points\n  }\n\n  radians(degress) {\n    return degress * Math.PI / 180;\n  }\n\n  post_action(points){\n    return points\n  }\n}\n\nmodule.exports = {\n  Point,\n  Process,\n  WaitCommand,\n  HomeCommand,\n  MixCommand,\n  CalibrationCommand,\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/libs/processes/base.js\n ** module id = 23\n ** module chunks = 0\n **/","function zAixs(points, params){\n\n  if (params.high === undefined) {\n    return points;\n  }\n\n  if (params.name === 'fixed_point') {\n    return points;\n  }\n\n  const startH = params.high.start;\n  const endH = (params.high.end !== undefined)? params.high.end: startH;\n  const diffH = endH - startH;\n\n  for(let i = 0; i < points.length; i++){\n    points[i].z = startH + (diffH/points.length) * i;\n  }\n\n  return points;\n}\n\nmodule.exports = zAixs;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/libs/processes/middleware/z-aixs.js\n ** module id = 24\n ** module chunks = 0\n **/","function temperature(points, params){\n\n  if (params.temperature === undefined) {\n    return points;\n  }\n\n  for(let i = 0; i < points.length; i++){\n    points[i].t = params.temperature\n  }\n\n  return points;\n}\n\nmodule.exports = temperature;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/libs/processes/middleware/temperature.js\n ** module id = 25\n ** module chunks = 0\n **/","const Base = require('./base');\nconst Point = Base.Point;\n\nconst QUICK_MOVE_F = 5000;\n\nclass FixedPoint extends Base.Process {\n\n  static get default() {\n    return Object.assign({}, {\n      type: 'process',\n      name: 'fixed_point',\n      coordinates: {\n        x: 0, // mm\n        y: 0, // mm\n      },\n      high: {\n        start: 300, // mm\n        end: 300,\n      },\n      total_water: 100, // mm\n      point_interval: 1.0, // mm\n      feedrate: 80, // mm\n      extrudate: 0.2, // ml/mm\n      temperature: 60, // C\n    })\n  }\n\n  constructor(params = FixedPoint.default) {\n    super(params);\n\n    this.point_number = this.length / this.params.point_interval;\n  }\n\n  get time() {\n    return (this.params.total_water / this.params.extrudate) / this.params.feedrate * 60;\n  }\n\n  get water() {\n    return this.params.total_water;\n  }\n\n  get length() {\n    return this.params.total_water / this.params.extrudate;\n  }\n\n  get _points() {\n    const x = this.params.coordinates.x;\n    const y = this.params.coordinates.y;\n\n    const points = [];\n\n    // Quick move to the start point.\n    let move = new Point(x, y, QUICK_MOVE_F)\n    points.push(move)\n\n    for (let i = 0; i < this.length; i++) {\n      let p = new Point(null, null, this.params.extrudate)\n      p.e = this.water / this.length\n      p.f = this.params.feedrate\n      points.push(p)\n    }\n\n    return points;\n  }\n\n  post_action(points){\n    points[0].e = 0;\n\n    return points;\n  }\n}\n\nmodule.exports = FixedPoint;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/libs/processes/fixed-point.js\n ** module id = 26\n ** module chunks = 0\n **/","const Base = require('./base');\nconst Point = Base.Point;\n\nclass Spiral extends Base.Process {\n\n  static get default() {\n    return Object.assign({}, {\n      type: 'process',\n      name: 'spiral',\n      radius: {\n        start: 10, // mm\n        end: 20, // mm\n      },\n      high: {\n        start: 300, // mm\n        end: 300,\n      },\n      cylinder: 5,\n      point_interval: 2.0, // mm\n      feedrate: 80, // mm\n      extrudate: 0.2, // ml/mm\n      temperature: 60, // C\n    })\n  }\n\n  constructor(params = Spiral.default) {\n    super(params);\n    this.created_points = this.generatePoints();\n  }\n\n  get time() {\n    return this.length / this.params.feedrate * 60;\n  }\n\n  get water() {\n    return this.created_points.length * this.params.extrudate;\n  }\n\n  get length() {\n    return this.created_points.length * this.params.point_interval;\n  }\n\n  get _points() {\n    return this.created_points;\n  }\n\n  generatePoints() {\n    const maxTheta = this.radians(this.params.cylinder * 360);\n    // a is acceleration\n    const a = (this.params.radius.end - this.params.radius.start) / maxTheta;\n\n    let totalTheta = 0;\n    const points = [];\n\n    const e = this.params.extrudate;\n    while (totalTheta <= maxTheta) {\n      // point interval / (2 * pi * r) = theta for one step\n      const nowRadius = a * totalTheta + this.params.radius.start;\n      const nowTheta = this.radians((this.params.point_interval / (2 * Math.PI * nowRadius)) * 360);\n\n      totalTheta = totalTheta + nowTheta;\n\n      const x = nowRadius * Math.cos(totalTheta);\n      const y = nowRadius * Math.sin(totalTheta);\n\n      let p = new Point(x, y, this.params.feedrate);\n      p.e = e;\n      // Create the point object to save the information\n      points.push(p);\n    }\n    return points;\n  }\n}\n\nmodule.exports = Spiral;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/libs/processes/spiral.js\n ** module id = 27\n ** module chunks = 0\n **/","const Base = require('./base');\n\nclass SpiralTotalWater extends Base.Process {\n\n  static get default() {\n    return Object.assign({}, {\n      type: 'process',\n      name: 'spiral total water',\n      radius: {\n        start: 10, // mm\n        end: 20, // mm\n      },\n      high: {\n        start: 300, // mm\n        end: 300,\n      },\n      cylinder: 5,\n      point_interval: 2.0, // mm\n      total_water: 60, // ml\n      total_time: 30, // sec\n      temperature: 60, // C\n    })\n  }\n\n  constructor(params) {\n    super(params);\n\n    this.created_points = this.generatePoints();\n  }\n\n  get time() {\n    return this.params.total_time;\n  }\n\n  set time(sec) {\n    this.params.total_time = sec;\n  }\n\n  get water() {\n    return this.params.total_water;\n  }\n\n  set water(ml) {\n    this.params.total_water = ml;\n  }\n\n  get length() {\n    return this.params.point_interval * (this.created_points.length - 1);\n  }\n\n  get _points() {\n    return this.created_points;\n  }\n\n  generatePoints() {\n    const maxTheta = this.radians(this.params.cylinder * 360);\n    // a is acceleration\n    const a = (this.params.radius.end - this.params.radius.start) / maxTheta;\n\n    let totalTheta = 0;\n    const points = [];\n\n    while (totalTheta <= maxTheta) {\n      // point interval / (2 * pi * r) = theta for one step\n      const nowRadius = a * totalTheta + this.params.radius.start;\n      const nowTheta = this.radians((this.params.point_interval / (2 * Math.PI * nowRadius)) * 360);\n\n      totalTheta = totalTheta + nowTheta;\n\n      const x = nowRadius * Math.cos(totalTheta);\n      const y = nowRadius * Math.sin(totalTheta);\n\n      // Create the point object to save the information\n      points.push(new Base.Point(x, y));\n    }\n\n    // f\n    const totalLen = this.params.point_interval * (points.length - 1);\n    const f = (totalLen * 60) / this.params.total_time;\n    const e = this.water / points.length\n\n    for (const point of points) {\n      point.f = f;\n      point.e = e;\n    }\n\n    return points;\n  }\n}\n\nmodule.exports = SpiralTotalWater;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/libs/processes/spiral-total-water.js\n ** module id = 28\n ** module chunks = 0\n **/","const Base = require('./base');\nconst WaitCommand = Base.WaitCommand;\n\n\nclass Wait extends Base.Process {\n\n  static get default() {\n    return Object.assign({}, {\n      type: 'command',\n      name: 'wait',\n      total_time: 30\n    })\n  }\n\n  constructor(params = Wait.default) {\n    super(params);\n  }\n\n  get time() {\n    return this.params.total_time;\n  }\n\n  get water() {\n    return 0;\n  }\n\n  get length() {\n    return 0;\n  }\n\n  get points() {\n    return [\n      new WaitCommand(this.params.total_time)\n    ];\n  }\n}\n\nmodule.exports = Wait;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/libs/processes/wait.js\n ** module id = 29\n ** module chunks = 0\n **/","const Base = require('./base');\nconst HomeCommand = Base.HomeCommand;\n\n\nclass Home extends Base.Process {\n\n  static get default() {\n    return Object.assign({}, {\n      type: 'command',\n      name: 'home',\n    })\n  }\n\n  constructor(params = Home.default) {\n    super(params);\n  }\n\n  get time() {\n    return 0;\n  }\n\n  get water() {\n    return 0;\n  }\n\n  get length() {\n    return 0;\n  }\n\n  get points() {\n    return [\n      new HomeCommand()\n    ];\n  }\n}\n\nmodule.exports = Home\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/libs/processes/home.js\n ** module id = 30\n ** module chunks = 0\n **/","const Base = require('./base');\nconst Point = Base.Point;\n\nconst QUICK_MOVE_F = 5000;\n\nclass Move extends Base.Process {\n\n  static get default() {\n    return Object.assign({}, {\n      type: 'process',\n      name: 'move',\n      coordinates: {\n        x: 0,\n        y: 0,\n      },\n      high: {\n        start: 300,\n      },\n    })\n  }\n\n  constructor(params = Move.default) {\n    super(params);\n  }\n\n  get time() {\n    return 0;\n  }\n\n  get water() {\n    return 0;\n  }\n\n  get length() {\n    return 1;\n  }\n\n  get _points() {\n    const x = this.params.coordinates.x;\n    const y = this.params.coordinates.y;\n\n    const points = [];\n\n    // Quick move to the start point.\n    let move = new Point(x, y, QUICK_MOVE_F)\n    points.push(move)\n\n    return points;\n  }\n}\n\nmodule.exports = Move;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/libs/processes/move.js\n ** module id = 31\n ** module chunks = 0\n **/","module.exports = require(\"inert\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"inert\"\n ** module id = 32\n ** module chunks = 0\n **/","module.exports = require(\"vision\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"vision\"\n ** module id = 33\n ** module chunks = 0\n **/","module.exports = require(\"hapi-swagger\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"hapi-swagger\"\n ** module id = 34\n ** module chunks = 0\n **/"],"sourceRoot":""}